"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleRequestError = exports.UnauthorizedError = exports.UnauthenticatedError = exports.NotFoundError = exports.InternalServerError = exports.ConflictError = exports.BadRequestError = void 0;
class RequestError extends Error {
    status;
    error;
    message;
    constructor(message, status, error) {
        super(message);
        this.status = status;
        this.message = message;
        this.error = error;
    }
    sendResponse(res) {
        const response = {
            message: this.message,
            error: this.error || undefined
        };
        return res.status(this.status).json(response);
    }
}
class BadRequestError extends RequestError {
    constructor(message, error) {
        super(message, 400, error);
    }
}
exports.BadRequestError = BadRequestError;
class UnauthenticatedError extends RequestError {
    constructor(message, error) {
        super(message, 401, error);
    }
}
exports.UnauthenticatedError = UnauthenticatedError;
class UnauthorizedError extends RequestError {
    constructor(message, error) {
        super(message, 403, error);
    }
}
exports.UnauthorizedError = UnauthorizedError;
class NotFoundError extends RequestError {
    constructor(message, error) {
        super(message, 404, error);
    }
}
exports.NotFoundError = NotFoundError;
class ConflictError extends RequestError {
    constructor(message, error) {
        super(message, 409, error);
    }
}
exports.ConflictError = ConflictError;
class InternalServerError extends RequestError {
    constructor(message, error) {
        super(message, 500, error);
    }
}
exports.InternalServerError = InternalServerError;
function handleRequestError(error, _, res, __) {
    if (error instanceof RequestError) {
        return error.sendResponse(res);
    }
    else {
        return new InternalServerError("unknown exception", error).sendResponse(res);
    }
}
exports.handleRequestError = handleRequestError;
