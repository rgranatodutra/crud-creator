import { NextFunction, Request, Response } from "express";
declare class RequestError extends Error {
    private readonly status;
    private readonly error;
    readonly message: string;
    constructor(message: string, status: number, error?: any);
    sendResponse(res: any): void;
}
declare class BadRequestError extends RequestError {
    constructor(message: string, error?: any);
}
declare class UnauthenticatedError extends RequestError {
    constructor(message: string, error?: any);
}
declare class UnauthorizedError extends RequestError {
    constructor(message: string, error?: any);
}
declare class NotFoundError extends RequestError {
    constructor(message: string, error?: any);
}
declare class ConflictError extends RequestError {
    constructor(message: string, error?: any);
}
declare class InternalServerError extends RequestError {
    constructor(message: string, error?: any);
}
declare function handleRequestError(error: Error, _: Request, res: Response, __: NextFunction): void;
export { BadRequestError, ConflictError, InternalServerError, NotFoundError, UnauthenticatedError, UnauthorizedError, handleRequestError };
